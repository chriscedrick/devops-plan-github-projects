name: Project Automation

on:
  issues:
    types: [assigned]
  create:
  pull_request:
    types: [opened, closed]

jobs:
  move_to_in_progress:
    if: github.event_name == 'issues' || github.event_name == 'create'
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to "In progress" column
        uses: actions/github-script@v6
        with:
          script: |
            const projectNumber = 2;
            const columnName = "In progress";
            const issueNodeId = context.payload.issue.node_id;

            console.log(`Moving issue with Node ID: ${issueNodeId} to column: ${columnName}`);

            const { repository } = await github.graphql(`
              query($owner: String!, $repo: String!, $projectNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 10) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            `, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              projectNumber,
            });

            const projectId = repository.projectV2.id;

            const { id: statusFieldId } = repository.projectV2.fields.nodes.find(
              field => field.name === "Status"
            );

            if (!statusFieldId) {
              console.error("Could not find 'Status' field in the project.");
              return;
            }

            const { resource } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const item = resource.node.items.nodes.find(
              item => item.content?.id === issueNodeId
            );

            if (item) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: $value
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId,
                itemId: item.id,
                fieldId: statusFieldId,
                value: columnName,
              });

              console.log(`Moved issue to column: ${columnName}`);
            } else {
              console.error("Issue not found in the project.");
            }
